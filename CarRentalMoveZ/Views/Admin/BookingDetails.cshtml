@model CarRentalMoveZ.ViewModels.BookingDetailsViewModel
@using CarRentalMoveZ.DTOs

@using System.Globalization

@{
    ViewData["Title"] = "Booking Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var safeImgURL = Model.ImgURL ?? "/images/default-car.png";
    var safePhone = Model.PhoneNumber ?? "";
    var safePaymentMethod = Model.PaymentMethod ?? "";
    var safePaymentStatus = Model.PaymentStatus ?? "";
    var startDatePost = Model.StartDate.ToString("o", CultureInfo.InvariantCulture);
    var endDatePost = Model.EndDate.ToString("o", CultureInfo.InvariantCulture);
    var paymentDatePost = Model.PaymentDate.HasValue ? Model.PaymentDate.Value.ToString("o", CultureInfo.InvariantCulture) : "";
    var amountPost = Model.Amount.ToString(CultureInfo.InvariantCulture);
    var paymentAmountPost = Model.PaymentAmount.ToString(CultureInfo.InvariantCulture);
    var pricePerDayPost = Model.PricePerDay.ToString(CultureInfo.InvariantCulture);
    var isPaidPost = (Model.IsPaid ? "true" : "false");
    var safeDriverStatus = Model.DriverStatus ?? "Without Driver";

}

<div class="container-fluid py-3">
    <div class="d-flex align-items-center justify-content-between flex-wrap mb-4">
        <h3>Booking Details</h3>
        <a href="@Url.Action("ManageBookings", "Admin")" class="btn btn-secondary d-flex align-items-center">
            <i class="bi bi-arrow-left me-2"></i> Back to Bookings
        </a>
    </div>

    <div class="card p-4 mb-4">
        <div class="row g-3 align-items-start">
            <!-- Left Side: Car Image -->
            <div class="col-md-4 d-flex justify-content-start">
                <img src="@safeImgURL"
                     alt="@Model.CarName"
                     class="rounded border img-fluid"
                     style="max-width: 500px; height: auto;" />
            </div>

            <!-- Right Side: Booking Info -->
            <div class="col-md-8">
                <h5 class="fw-semibold mb-3">Booking # @Model.BookingId</h5>
                <p><strong>Client Name:</strong> @Model.CustomerName</p>
                <p><strong>Phone:</strong> @(string.IsNullOrWhiteSpace(safePhone) ? "N/A" : safePhone)</p>
                <p><strong>Car Model:</strong> @Model.CarName</p>
                <p><strong>Booking Dates:</strong> Start @Model.StartDate.ToString("MMM d, yyyy") • End @Model.EndDate.ToString("MMM d, yyyy")</p>
                <p><strong>Location:</strong> @Model.Location</p>
                <p>
                    <strong>Payment:</strong> @Model.PaymentAmount.ToString("C")
                    @if (Model.IsPaid)
                    {
                        <span class="text-success">(Paid)</span>
                    }
                    else
                    {
                        <span class="text-danger">(Pending)</span>
                    }
                </p>
                <p><strong>Payment Method:</strong> @(string.IsNullOrWhiteSpace(safePaymentMethod) ? "N/A" : safePaymentMethod)</p>
                <p><strong>Payment Date:</strong> @(Model.PaymentDate.HasValue? Model.PaymentDate.Value.ToString("MMM d, yyyy") : "N/A")</p>
                <p>
                    <strong>Status:</strong>
                    <span class="pill @(Model.BookingStatus?.ToLowerInvariant() ?? "pending")">
                        @Model.BookingStatus
                    </span>
                </p>
                <p><strong>Driver Status:</strong> @(Model.DriverStatus ?? "Without Driver")</p>

                @* Assign Driver Form (only if Pending + Paid) *@
                @if (string.Equals(Model.BookingStatus, "Pending", StringComparison.OrdinalIgnoreCase) && Model.IsPaid)
                {
                    <form method="post" asp-controller="Admin" asp-action="BookingDetails" class="mt-3">
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(m => m.BookingId)
                        @Html.HiddenFor(m => m.CarId)
                        @Html.HiddenFor(m => m.CustomerId)
                        @Html.HiddenFor(m => m.Location)
                        @Html.HiddenFor(m => m.BookingStatus)
                        <input type="hidden" name="StartDate" value="@startDatePost" />
                        <input type="hidden" name="EndDate" value="@endDatePost" />
                        <input type="hidden" name="Days" value="@Model.Days" />
                        <input type="hidden" name="Amount" value="@amountPost" />
                        <input type="hidden" name="CarName" value="@Model.CarName" />
                        <input type="hidden" name="ImgURL" value="@safeImgURL" />
                        <input type="hidden" name="PricePerDay" value="@pricePerDayPost" />
                        <input type="hidden" name="CustomerName" value="@Model.CustomerName" />
                        <input type="hidden" name="PhoneNumber" value="@safePhone" />
                        <input type="hidden" name="IsPaid" value="@isPaidPost" />
                        <input type="hidden" name="PaymentAmount" value="@paymentAmountPost" />
                        <input type="hidden" name="PaymentDate" value="@paymentDatePost" />
                        <input type="hidden" name="PaymentMethod" value="@safePaymentMethod" />
                        <input type="hidden" name="PaymentStatus" value="@safePaymentStatus" />
                        <input type="hidden" name="DriverStatus" value="@safeDriverStatus" />



                        <div class="input-group mb-3">
                            @* Show dropdown only if location is not Office *@
                            @if (Model.IsPaid)
                            {
                            @if ((!string.Equals(Model.Location, "Office", StringComparison.OrdinalIgnoreCase) || Model.DriverStatus == "With Driver"))
                            {
                                @Html.DropDownListFor(
                                m => m.DriverId,
                                                new SelectList(
                                                (Model.AvailableDrivers ?? Enumerable.Empty<DriverDTO>()).ToList(),
                                                "DriverId",
                                                "Name",
                                                Model.DriverId
                                                ),
                                                "-- Select Driver --",
                                                new { @class = "form-select" }
                                                )
                                                }

                            @* Assign button always visible *@
                            <button type="submit" class="btn btn-primary">Assign</button>
                            }
                        </div>

                        @Html.ValidationMessageFor(m => m.DriverId, "", new { @class = "text-danger" })
                </form>
                }
            </div>
        </div>
    </div>
</div>
