@model CarRentalMoveZ.ViewModels.BookingViewModel

@{
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
    ViewData["Title"] = "New Booking";
}


<h2>Booking for @Model.CarName</h2>

<div class="row">
    <div class="col-md-6">
        <img src="@Model.ImgURL" class="img-fluid rounded" />
        <p><strong>Price Per Day:</strong> $@Model.PricePerDay</p>
    </div>

    <div class="col-md-6">
        <form asp-action="NewBooking" asp-controller="Customer" method="post">
            @* Hidden fields for binding *@
            <input type="hidden" asp-for="CarId" />
            <input type="hidden" asp-for="CustomerId" />
            <input type="hidden" asp-for="CarName" />
            <input type="hidden" asp-for="ImgURL" />
            <input type="hidden" asp-for="PricePerDay" />
            <input type="hidden" asp-for="CustomerName" />
            <input type="hidden" asp-for="PhoneNumber" />
            <input type="hidden" asp-for="Days" id="days" />
            <input type="hidden" asp-for="Amount" id="amount" />

            <div class="mb-3">
                <label>Customer</label>
                <input class="form-control" value="@Model.CustomerName" readonly />
            </div>

            <div class="mb-3">
                <label>Contact No</label>
                <input class="form-control" value="@Model.PhoneNumber" readonly />
            </div>

            <div class="mb-3">
                <label asp-for="Location">Pick Up Location</label>
                <input asp-for="Location" class="form-control" required />
            </div>

            <div class="mb-3">
                <label>Driver Option</label>
                <select asp-for="DriverStatus" class="form-control" id="driverStatus">
                    <option value="Without Driver">Without Driver</option>
                    <option value="With Driver">With Driver (+LKR 1000/day)</option>
                </select>
            </div>

            <div class="mb-3">
                <label asp-for="StartDate">Start Date & Time</label>
                <div class="input-group flatpickr" id="startDateWrapper">
                    <input asp-for="StartDate" class="form-control" id="startDate" placeholder="Rent Date & Time" readonly data-input />
                    <span class="input-group-text" data-toggle>
                        <i class="bi bi-calendar"></i>
                    </span>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="EndDate">End Date & Time</label>
                <div class="input-group flatpickr" id="endDateWrapper">
                    <input asp-for="EndDate" class="form-control" id="endDate" placeholder="Return Date & Time" readonly data-input />
                    <span class="input-group-text" data-toggle>
                        <i class="bi bi-calendar"></i>
                    </span>
                </div>
            </div>

            <div class="mb-3">
                <label>Number of Days</label>
                <input type="text" id="daysDisplay" class="form-control" readonly />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label>Total Amount</label>
                <input type="text" id="amountDisplay" class="form-control" readonly />
            </div>

            <button type="submit" class="btn btn-primary w-100">Confirm Booking</button>
        </form>
    </div>
</div>

@section Scripts {

  

    <script>
        function calculateBooking() {
            const start = document.getElementById("startDate").value;
            const end = document.getElementById("endDate").value;
            const price = parseFloat("@Model.PricePerDay");
            const driverStatus = document.getElementById("driverStatus").value;

            if (start && end) {
                const startDate = new Date(start);
                const endDate = new Date(end);

                if (endDate >= startDate) {
                    const diffTime = endDate - startDate;
                    const days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // inclusive
                    

                    let amount = days * price;

                    if (driverStatus === "With Driver") {
                    amount += days * 1000;
                    }

                    document.getElementById("daysDisplay").value = days;
                    document.getElementById("amountDisplay").value = "Rs." + amount.toFixed(2);

                    document.getElementById("days").value = days;
                    document.getElementById("amount").value = amount.toFixed(2);
                } else {
                    document.getElementById("daysDisplay").value = "";
                    document.getElementById("amountDisplay").value = "";
                    document.getElementById("days").value = "";
                    document.getElementById("amount").value = "";
                }
            }
        }

        document.getElementById("startDate").addEventListener("change", calculateBooking);
        document.getElementById("endDate").addEventListener("change", calculateBooking);
        document.getElementById("driverStatus").addEventListener("change", calculateBooking);

        calculateBooking(); // Recalculate on page load if values are pre-filled


            const startInput = document.getElementById("startDate");
        const endInput = document.getElementById("endDate");

        // Prevent selecting past dates for Start Date
        const today = new Date().toISOString().split("T")[0];
        startInput.setAttribute("min", today);

        // When user selects Start Date → restrict End Date
        startInput.addEventListener("change", function () {
            const startDate = this.value;
            endInput.value = ""; // clear old value if any
            endInput.setAttribute("min", startDate);
        });

        // Show popup if error exists
        @if (TempData["BookingError"] != null)
        {
                <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Booking Failed',
                        text: '@TempData["BookingError"]'
                    });
                </text>
        }

        const bookedRanges = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.BookedRanges));

        const endPicker = flatpickr("#endDateWrapper", {
            wrap: true,
            enableTime: true,       // enable time picker
            dateFormat: "Y-m-d H:i",
            minDate: "today",
            disable: bookedRanges.map(r => ({ from: r.start, to: r.end })),
            clickOpens: false
        });

        flatpickr("#startDateWrapper", {
            wrap: true,
            enableTime: true,       // enable time picker
            dateFormat: "Y-m-d H:i",
            minDate: "today",
            disable: bookedRanges.map(r => ({ from: r.start, to: r.end })),
            clickOpens: false,
            onChange: function(selectedDates, dateStr) {
                if (selectedDates.length > 0) {
                    endPicker.set("minDate", dateStr);
                }
            }
        });

    </script>
}
