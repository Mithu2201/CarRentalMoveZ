@model CarRentalMoveZ.ViewModels.BookingViewModel

@{
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
    ViewData["Title"] = "New Booking";
}

<div class="container mt-5">
    <h2 class="page-heading">Booking for @Model.CarName</h2>

    <div class="row g-4">
        <div class="col-lg-6 col-12 text-center car-column">
            <div class="booking-image-container">
                <p><strong>Price Per Day:</strong> Rs.@Model.PricePerDay</p>
                <img src="@Model.ImgURL" class="img-fluid rounded mb-3" />
               
            </div>
        </div>

        <div class="col-lg-6 col-12">
            <div class="booking-form-container">
                <form asp-action="NewBooking" asp-controller="Customer" method="post" id="bookingForm" novalidate>
                    @* Hidden fields *@
                    <input type="hidden" asp-for="CarId" />
                    <input type="hidden" asp-for="CustomerId" />
                    <input type="hidden" asp-for="CarName" />
                    <input type="hidden" asp-for="ImgURL" />
                    <input type="hidden" asp-for="PricePerDay" />
                    <input type="hidden" asp-for="CustomerName" />
                    <input type="hidden" asp-for="PhoneNumber" />
                    <input type="hidden" asp-for="Days" id="days" />
                    <input type="hidden" asp-for="Amount" id="amount" />

                    <div class="form-group mb-3">
                        <label class="form-label">Customer</label>
                        <input class="form-control" value="@Model.CustomerName" required />
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="PhoneNumber" class="form-label">Contact No</label>
                        <input asp-for="PhoneNumber"
                               type="tel"
                               class="form-control"
                               maxlength="10"
                               pattern="[0-9]{10}"
                               inputmode="numeric"
                               oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0,10);"
                               required />
                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3 position-relative">
                        <label class="form-label" asp-for="Location">Pick Up Location</label>
                        <input asp-for="Location" id="autocomplete" class="form-control" value="Office" required />
                        <div id="suggestions" class="autocomplete-suggestions"></div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label">Driver Option</label>
                        <select asp-for="DriverStatus" class="form-control" id="driverStatus" required>
                            <option value="">-- Select --</option>
                            <option value="Without Driver">Without Driver</option>
                            <option value="With Driver">With Driver (+LKR 1000/day)</option>
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label"><i class="bi bi-calendar2-event"></i> Start Date & Time</label>
                        <div class="input-group flatpickr" id="startDateWrapper">
                            <input asp-for="StartDate" class="form-control" id="startDate" placeholder="Rent Date & Time" readonly data-input required />
                            <span class="input-group-text" data-toggle>
                                <i class="bi bi-calendar"></i>
                            </span>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label"><i class="bi bi-calendar2-event"></i> End Date & Time</label>
                        <div class="input-group flatpickr" id="endDateWrapper">
                            <input asp-for="EndDate" class="form-control" id="endDate" placeholder="Return Date & Time" readonly data-input required />
                            <span class="input-group-text" data-toggle>
                                <i class="bi bi-calendar"></i>
                            </span>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label"><i class="bi bi-calendar2-day"></i> Number of Days</label>
                        <input type="text" id="daysDisplay" class="form-control" readonly required aria-live="polite" />
                    </div>

                    <div class="form-group mb-4">
                        <label class="form-label"><i class="bi bi-cash-stack"></i> Total Amount</label>
                        <input type="text" id="amountDisplay" class="form-control" readonly required aria-live="polite" />
                    </div>

                    <button type="submit" class="btn btn-primary-custom">Confirm Booking</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {

  

    <script>
        function calculateBooking() {
            const start = document.getElementById("startDate").value;
            const end = document.getElementById("endDate").value;
            const price = parseFloat("@Model.PricePerDay");
            const driverStatus = document.getElementById("driverStatus").value;

            if (start && end) {
                const startDate = new Date(start);
                const endDate = new Date(end);

                if (endDate >= startDate) {
                    const diffTime = endDate - startDate;
                    const days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // inclusive
                    

                    let amount = days * price;

                    if (driverStatus === "With Driver") {
                    amount += days * 1000;
                    }

                    document.getElementById("daysDisplay").value = days;
                    document.getElementById("amountDisplay").value = "Rs." + amount.toFixed(2);

                    document.getElementById("days").value = days;
                    document.getElementById("amount").value = amount.toFixed(2);
                } else {
                    document.getElementById("daysDisplay").value = "";
                    document.getElementById("amountDisplay").value = "";
                    document.getElementById("days").value = "";
                    document.getElementById("amount").value = "";
                }
            }
        }

        document.getElementById("startDate").addEventListener("change", calculateBooking);
        document.getElementById("endDate").addEventListener("change", calculateBooking);
        document.getElementById("driverStatus").addEventListener("change", calculateBooking);

        calculateBooking(); // Recalculate on page load if values are pre-filled


            const startInput = document.getElementById("startDate");
        const endInput = document.getElementById("endDate");

        // Prevent selecting past dates for Start Date
        const today = new Date().toISOString().split("T")[0];
        startInput.setAttribute("min", today);

        // When user selects Start Date → restrict End Date
        startInput.addEventListener("change", function () {
            const startDate = this.value;
            endInput.value = ""; // clear old value if any
            endInput.setAttribute("min", startDate);
        });

        // Show popup if error exists
        @if (TempData["BookingError"] != null)
        {
                <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Booking Failed',
                        text: '@TempData["BookingError"]'
                    });
                </text>
        }

        const bookedRanges = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.BookedRanges));

        flatpickr("#startDateWrapper", {
            wrap: true,
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            minDate: "today",
            disable: bookedRanges.map(r => ({ from: r.start, to: r.end })), // only active bookings
            clickOpens: false,
            onChange: function(selectedDates, dateStr) {
                if (selectedDates.length > 0) {
                    endPicker.set("minDate", dateStr);
                }
            }
        });

        const endPicker = flatpickr("#endDateWrapper", {
            wrap: true,
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            minDate: "today",
            disable: bookedRanges.map(r => ({ from: r.start, to: r.end })),
            clickOpens: false
        });

    </script>
    <script>
        const input = document.getElementById('autocomplete');
        const suggestions = document.getElementById('suggestions');
        let selectedIndex = -1;
        let currentSuggestions = [];

        async function fetchSuggestions(query) {
            if (!query) return [];
            const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&addressdetails=1&limit=5`;
            const response = await fetch(url);
            const data = await response.json();
            return data;
        }

        function renderSuggestions(items) {
            suggestions.innerHTML = '';
            currentSuggestions = items;
            selectedIndex = -1;
            items.forEach((item, index) => {
                const div = document.createElement('div');
                div.className = 'suggestion-item';
                div.textContent = item.display_name;
                div.addEventListener('click', () => selectSuggestion(index));
                suggestions.appendChild(div);
            });
        }

        function selectSuggestion(index) {
            const item = currentSuggestions[index];
            if (item) {
                input.value = item.display_name;
                suggestions.innerHTML = '';
                console.log('Selected:', item);
            }
        }

        input.addEventListener('input', async () => {
            const query = input.value;
            const items = await fetchSuggestions(query);
            renderSuggestions(items);
        });

        input.addEventListener('keydown', (e) => {
            const items = suggestions.querySelectorAll('.suggestion-item');
            if (e.key === 'ArrowDown') {
                selectedIndex = (selectedIndex + 1) % items.length;
                updateActive(items);
                e.preventDefault();
            } else if (e.key === 'ArrowUp') {
                selectedIndex = (selectedIndex - 1 + items.length) % items.length;
                updateActive(items);
                e.preventDefault();
            } else if (e.key === 'Enter') {
                if (selectedIndex >= 0) {
                    selectSuggestion(selectedIndex);
                    e.preventDefault();
                }
            }
        });

        function updateActive(items) {
            items.forEach((item, i) => {
                item.classList.toggle('active', i === selectedIndex);
            });
        }

        // Close suggestions when clicking outside
        document.addEventListener('click', (e) => {
            if (e.target !== input) suggestions.innerHTML = '';
        });

            // Bootstrap-like client-side validation
        document.getElementById("bookingForm").addEventListener("submit", function (event) {
            let form = this;
            let isValid = true;

            // Loop all inputs/selects inside form
            form.querySelectorAll("input[required], select[required]").forEach(function (input) {
                if (!input.value || input.value.trim() === "") {
                    input.classList.add("is-invalid");  // highlight missing
                    isValid = false;
                } else {
                    input.classList.remove("is-invalid");
                    input.classList.add("is-valid");
                }
            });

            if (!isValid) {
                event.preventDefault(); // Stop submission
                event.stopPropagation();
            }
        });
    </script>
}
